**Docker file Instruction**

-> FROM : From instruction initilizes an new build stage & set an base image for subsequently instructions.
-> CMD :
-> COPY & ADD : 
   COPY & ADD are both docker instructions that server similar purpose, they let you copy files a specific location into Docker Image 
   COPY only lets you copy file or directory from your Host into docker 
   ADD lets you do 
       •	Same as COPY command allow you copy file or directory from your Host into docker
       •	You can use URL instead of a local file/Directory 
       •	Allow you to extract a component of tar file from Source directly to destination docker location.
-> EXPOSE :The EXPOSE instruction informs Docker that container listens on the specified network ports at runtime,
-> WORKDIR :The WORKDIR instruction sets the working directory 
-> HEALTHCHECK :
       HEALTHCHECK –interval=5s CMD ping -c 1 172.17.0.2
       --interval=DURATION(default:30s)
       --timeout=DURATION(default:30s)
       --start-period=Duration(default=0s)
       --retires=N(default:3)
-> ENTRYPOINT does not allow you to override the command

CMD commands are ignored by Daemon when there are parameters stated within the docker run command.
ENTRYPOINT instructions are not ignored, but instead, are appended as command-line parameters by treating those as arguments of the command.

CMD [“executable”, “parameter1”, “parameter2”]



#vim Dockerfile

=========================
FROM ubuntu
RUN apt-get update -y
RUN apt-get install -y nginx
WORKDIR /usr/share/nginx/html
COPY index.html  /usr/share/nginx/html
EXPOSE 8080
ADD compressedfile.tar.gz /usr/share/nginx/html
CMD ["nginx", "-g", "daemon off;"] 

===========================

#docker build .


======================
From busybox
HEALTHCHECK --interval=3s CMD ping -c 1 172.17.0.5

==============
#docker build .
#docker run -dt <imageid> sleep 5000



========
FROM busybox
ENTRYPOINT [‘’/bin/ping ’’]
==========
#docker build .
#docker run -dt <imageid> -c 1 8.8.8.8


========================
# Use an official Python runtime as a parent image
FROM python:3.8-slim
# Set the working directory in the container
WORKDIR /app
# Copy the current directory contents into the container at /app
COPY . /app
# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt
# Run script.py when the container launches
CMD ["python", "script.py"]
=========================================================

FROM ubuntu:latest

# Set the working directory in the image
WORKDIR /app

# Copy the files from the host file system to the image file system
COPY . /app

# Install the necessary packages
RUN apt-get update && apt-get install -y python3 python3-pip

# Set environment variables
ENV NAME World

# Run a command to start the application
CMD ["python3", "app.py"]

================
FROM ubuntu

WORKDIR /app

COPY requirements.txt /app
COPY devops /app

RUN apt-get update && \
    apt-get install -y python3 python3-pip && \
    pip install -r requirements.txt && \
    cd devops

ENTRYPOINT ["python3"]
CMD ["manage.py", "runserver", "0.0.0.0:8000"]
======================



========================================================
FROM ubuntu:latest
ENV DEBAIN_FRONTEND=noninteractive
RUN apt-get update -y && \
    apt-get upgrade -y && \
    apt-get install vim net-tools dnsutils jq -y

============================================================



